unalias -m '*'

#
# General
#
alias l='ls -la'
alias updateshell='source ~/.zshrc'
alias edit='code'
alias sshaddkey='ssh-add ~/.ssh/id_rsa'
alias malias='edit ~/.oh-my-zsh/custom/aliases.zsh'
curlj() {
  ARGS=$1
  curl --header "Content-Type: application/json" $ARGS | jq
}
convertmovrecordingstomp4() {
  input_dir="$HOME/Desktop"

  # Convert .mov files to .mp4
  for file in "$input_dir"/*.mov; do
      if [ -f "$file" ]; then
          filename=$(basename "$file")
          filename="${filename%.*}"
          output_file="$input_dir/$filename.mp4"

          if [ ! -f "$output_file" ]; then
              ffmpeg -i "$file" -c:v libx264 -crf 23 -preset medium -c:a aac -b:a 128k "$output_file"
              echo "Converted $filename.mov to $filename.mp4"
          else
              echo "Skipping $filename.mov as $filename.mp4 already exists"
          fi
      fi
  done

  echo "Conversion complete!"
}

#
# Git
#
# Most used
alias gnb='git checkout main && git pull && git checkout -b ga-a$(openssl rand -hex 3)'
alias gca='git commit --all --no-verify'
alias gp='git push'
alias cop='rubocop -A $(git diff --name-only | cat) $(git diff --name-only main...HEAD | cat)'
gpr() {
  # https://glab.readthedocs.io/en/latest/mr/create.html
  glab mr create --fill --push --remove-source-branch --squash-before-merge --title $1 --assignee ganswer --reviewer justin-rohrman,lucasgrocha_eh
}

# Additional
alias gs='git status'
alias gd='git diff'
alias ga='git add'
alias gc='git commit'
alias gl="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias gll='git log --stat -p'
alias gitdelete-local-branches='git branch | grep -v "main" | grep -v "develop" | grep -v "master" | xargs git branch -D'
alias gitmaster-pull-and-fetch='git checkout master && git pull && git fetch && git checkout -'
alias gitpull-and-fetch='git pull && git fetch'
function grename() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: $0 old_branch new_branch"
    return 1
  fi

  # Rename branch locally
  git branch -m "$1" "$2"
  # Rename branch in origin remote
  if git push origin :"$1"; then
    git push --set-upstream origin "$2"
  fi
}
#
# Local Ports
#
porthog() {
  PORT=$1
  echo $(lsof -ti tcp:$PORT)
}

freeport() {
  PORT=$1
  $(lsof -ti tcp:$PORT) | xargs kill
  # PID=`lsof -ti tcp:$PORT`
  # if [ -z "$PID" ]; then
  #  echo "No process running on port $PORT"
  # else
  #   kill -KILL $PID
  # fi
}

# open a store rails console in the preview environment
# ex: preview_console bug-ewd-1234-branch
function preview_console() {
  local branch=$(echo "$1" | tr '/' '-' | tr '[:upper:]' '[:lower:]')
    kubectl -n $branch exec -it $(kubectl -n $branch get pods | awk '/store-api/ && !/postgres/ && !/redis/' | cut -d ' ' -f1) -- bundle exec rails console
}

# preview_console() {
#   kubectl exec --stdin --tty $(preivew_pod_name $1) -n $(preview_namespace $1) -- rails console
# }
# # $> preview_console branch

# preivew_pod_name() {
#   kubectl get pods -n $(preview_namespace $1) -o=name | head -n 1 | cut -d "/" -f 2
# }
# # $> preivew_pod_name branch

# preview_namespace() {
#   echo $1 | tr '/' '-' | awk '{print substr(tolower($0), 1, 63)}'
# }

# Start preview environment
# Usage:
#   preview <application> <namespace>
#   preview store ewd-123-some-new-ticket
# function preview {
#   api=$(get_app $1 $2)
#   kubectl -n $2 exec -it $api -- bundle exec rails c
# }

# Get store-api from namespace
# function get_app {
#   kubectl -n $2 get pods | grep -o "$1-api-[A-Za-z0-9]*-[A-Za-z0-9]*"
# }
