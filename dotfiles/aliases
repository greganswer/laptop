unalias -m '*'

#
# General
#
alias updateshell='source /Users/greganswer/go/src/github.com/greganswer/laptop/dotfiles/zshrc'
alias edit='code'
alias sshaddkey='ssh-add ~/.ssh/id_rsa'
alias malias='edit ~/.oh-my-zsh/custom/aliases.zsh'
curlj() {
  ARGS=$1
  curl --header "Content-Type: application/json" $ARGS | jq
}

#
# Docker
#
alias dc='docker-compose'
alias dclogs='dc logs -f --tail 100'
alias dcrestart='dc restart'
alias dcrebuild='dc rm -fsv; dcbuild --no-cache; dcup; dclogs'
alias dckillandremoveall='dockerkillandremoveall'
alias dccleanunused="docker system prune --all --force --volumes; osascript -e 'display notification \"Removed unused containers and images.\" with title \"Docker\"'"
alias dps='docker ps -a --format "table {{.Names}}\\t{{.Image}}\\t{{.RunningFor}}\\t{{.Status}}\\t{{.Ports}}" | (read -r; printf "%s\n" "$REPLY"; sort -k 1 )'

# Kill and remove all Docker containers and images.
function dockerkillandremoveall() {
  docker rm -f $(docker ps -a -q)
  docker rmi -f $(docker images -q)
  osascript -e 'display notification \"Removed all containers and images.\" with title \"Docker\"'
}

# Docker-compose up --detach with notification of length of time it takes to run.
function dcup() {
  T="$(date +%s)"
  dc up -d
  ELAPSED_TIME="$(($(date +%s) - T))"
  DURATION="$(($ELAPSED_TIME / 60)) min $(($ELAPSED_TIME % 60)) sec"
  echo "\n\nELAPSED_TIME = ${DURATION}"
  osascript -e "display notification \"Containers are ready. This took ${DURATION}.\" with title \"Docker\""
}

# Docker-compose build (with arguments if provided).
function dcbuild() {
  rm -rf tmp/pids
  T="$(date +%s)"
  if [ "$1" ]; then
    dc build --force-rm $1
  else
    dc build --force-rm
  fi
  ELAPSED_TIME="$(($(date +%s) - T))"
  DURATION="$(($ELAPSED_TIME / 60)) min $(($ELAPSED_TIME % 60)) sec"
  echo "\n\nELAPSED_TIME = ${DURATION}"
  osascript -e "display notification \"Build completed in ${DURATION}.\" with title \"Docker\""
}

# Docker-compose exec bash (with arguments if provided).
#
# Example:
#   $ dcexec db
#   $ dcexec db psql -U postgres
function dcexec() {
  if [ "$2" ]; then
    dc exec $1 ${@:2}
  else
    dc exec $1 bash
  fi
}

# Reinstall Docker for Mac
#
# NOTE: This is not used too frequently
function dockerreinstall() {
  read "response?Are you sure you want to reinstall the Docker app?  [Y/n] "
  response=${response:l} # tolower
  if [[ $response =~ ^(yes|y| ) ]] || [[ -z $response ]]; then
    brew cask uninstall docker &&
      echo "\nDeleting related files..." &&
      sudo rm -Rf /Applications/Docker
    sudo rm -f /usr/local/bin/docker
    sudo rm -f /usr/local/bin/docker-machine
    sudo rm -f /usr/local/bin/docker-compose
    sudo rm -f /usr/local/bin/docker-credential-osxkeychain
    sudo rm -Rf ~/.docker
    sudo rm -Rf $HOME/Library/Containers/com.docker.*
    echo "Related files deleted.\n"
    brew tap caskroom/cask
    brew cask install docker &&
      open /Applications/Docker.app
  else
    echo "Aborting..."
  fi
}

#
# Git
#
# Most used
alias gnb='git checkout main && git pull && git checkout -b $(openssl rand -hex 3)'
alias gca='git commit --all'
alias gp='git push'
gpr() {
  # https://glab.readthedocs.io/en/latest/mr/create.html
  glab mr create --fill --push --title $1 --assignee ganswer --reviewer jqian1,justin-rohrman,lucasgrocha_eh,ericktmr
}

# Additional
alias gs='git status'
alias gd='git diff'
alias ga='git add'
alias gc='git commit'
alias gl="git log --graph --pretty='%Cred%h%Creset -%C(auto)%d%Creset %s %Cgreen(%ad) %C(bold blue)<%an>%Creset' --date=short"
alias gll='git log --stat -p'
alias gitdelete-local-branches='git branch | grep -v "main" | grep -v "develop" | grep -v "master" | xargs git branch -D'
alias gitmaster-pull-and-fetch='git checkout master && git pull && git fetch && git checkout -'
alias gitpull-and-fetch='git pull && git fetch'
function grename() {
  if [[ -z "$1" || -z "$2" ]]; then
    echo "Usage: $0 old_branch new_branch"
    return 1
  fi

  # Rename branch locally
  git branch -m "$1" "$2"
  # Rename branch in origin remote
  if git push origin :"$1"; then
    git push --set-upstream origin "$2"
  fi
}
#
# Local Ports
#
porthog() {
  PORT=$1
  echo $(lsof -ti tcp:$PORT)
}

freeport() {
  PORT=$1
  $(lsof -ti tcp:$PORT) | xargs kill
  # PID=`lsof -ti tcp:$PORT`
  # if [ -z "$PID" ]; then
  #  echo "No process running on port $PORT"
  # else
  #   kill -KILL $PID
  # fi
}

preview_console() {
  kubectl exec --stdin --tty $(preivew_pod_name $1) -n $(preview_namespace $1) -- rails console
}
# $> preview_console branch

preivew_pod_name() {
  kubectl get pods -n $(preview_namespace $1) -o=name | head -n 1 | cut -d "/" -f 2
}
# $> preivew_pod_name branch

preview_namespace() {
  echo $1 | tr '/' '-' | awk '{print substr(tolower($0), 1, 63)}'
}

# Start preview environment
# Usage:
#   preview <application> <namespace>
#   preview store ewd-123-some-new-ticket
# function preview {
#   api=$(get_app $1 $2)
#   kubectl -n $2 exec -it $api -- bundle exec rails c
# }

# Get store-api from namespace
# function get_app {
#   kubectl -n $2 get pods | grep -o "$1-api-[A-Za-z0-9]*-[A-Za-z0-9]*"
# }
